 <-- this can be used to select and deselct calues  for an input box-->
<ui:inputCheckbox  class="myCheckbox" label="{!comp}" change="{!c.selectCompetency}" value="false" />
selectCompetency: function(component,event,helper){
        debugger;
        var selectedcomp = [];
        var boolean = event.getSource().get("v.value");
        if(boolean == true){
            var comp = event.getSource().get("v.label");
            selectedcomp = component.get("v.selectedComp");
            selectedcomp.push(comp);
        }else{
            selectedcomp = component.get("v.selectedComp");   
            var comp = event.getSource().get("v.label");
            if(selectedcomp.includes(comp))
            {
                const index = selectedcomp.indexOf(comp);
                selectedcomp.splice(index, 1);
            }
        }
        component.set("v.selectedComp",selectedcomp);
    },

<-- when u are getting a data in the form of map from apex and wanna sort it as per your requirement-->

  unorderedmap = BDWrapper['fieldMap'];

<this will consist of the keyset order..>
        var order = ['Company','Assignment','Stage','Amount','Probability','Contact','Industry Type'];

        var orderedmap = new Object();
        order.forEach(function (item) { 
            orderedmap[item] = unorderedmap[item]; 
   }); 

--------------------------------------------------------------------------------------------
Getting the values from map in javascript
//Object.keys(obj)  - this will give the keys in Map
Object.prototype.propertyIsEnumerable()
Object.create()
Object.getOwnPropertyNames()
Object.values() - will give all the values
Object.entries()

Handling a map from apex
----------------------------------------------------------
Splicing an array for a matched value and updating..

 var noteId = event.getSource().get("v.value");
        
        var noteList = component.get("v.NotesList");
        
        for (var i = 0; i < noteList.length; i++) {
            if(noteList[i].Id == noteId ){
                noteList.splice(i, 1);
            }
        }
         
        component.set("v.NotesList",noteList);
-----------------------------------------------------------

getting URL and jumping to it:
Url will only take that path where u want to jump after the host name

 var host = window.location.pathname;

 var urlEvent = $A.get("e.force:navigateToURL");
            urlEvent.setParams({
                'url': '/lightning/page/home'
            });
            urlEvent.fire();
            
---------------------------------------------------------

if you want to create a dynamic map for the data coming form  backend like a list of object for a particular type...

if( mapofRef.length == undefined || mapofRef.length == 0){
    var new_Ref = [];
    new_Ref.push({'Reference_Ques__c':result[i].Reference_Ques__c,'Reference_Fr_Ques__c':result[i].Reference_Fr_Ques__c,
                  'Seq_Number__c':'','Assignment__c':result[i].Assignment__c,'Type__c':result[i].Type__c,'Id':result[i].Id});     

    mapofRef.push({
        key: result[i].Type__c,
        value: new_Ref
    });
}else{
    for (let j = 0; j < mapofRef.length; j++) {
        if(mapofRef[j].key == result[i].Type__c){
            mapofRef[j].value.push({'Reference_Ques__c':result[i].Reference_Ques__c,'Reference_Fr_Ques__c':result[i].Reference_Ques__c,
                                    'Seq_Number__c':'','Assignment__c':result[i].Assignment__c,'Type__c':result[i].Type__c,'Id':result[i].Id});
            break;
        }else{
            // check if all Keys has been iterarted
            // If yes then and we could not find the key - then push it

            if(j == mapofRef.length-1){
                   var new_Ref = [];
                    new_Ref.push({'Reference_Ques__c':result[i].Reference_Ques__c,'Reference_Fr_Ques__c':result[i].Reference_Ques__c,
                                  'Seq_Number__c':'','Assignment__c':result[i].Assignment__c,'Type__c':result[i].Type__c,'Id':result[i].Id});     

                    mapofRef.push({
                        key: result[i].Type__c,
                        value: new_Ref
                    });  
                break;
            }else{
                continue;
            }
        }

    }
}
